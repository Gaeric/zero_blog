#+title: 个人博客
#+HTML_HEAD: <link href="./worg.css" rel="stylesheet" type="text/css">
学习python，搭建个人博客作为实战项目
* 要求
  1. 依据廖雪峰的python3教程，完成功能
  2. 不得copy现有代码，所有代码必须亲自敲写
  3. 完成内容，并整理笔记
* journal
  1. 尽量使编码自解释：通过命名传达出数据的意图
  2. 知识要即刻积累，通过注释加入程序之中
  3. 部分总结记录于git log之中，注意之后进行回顾
* 学习笔记 
** ORM及metaclass用法
   Orm作用只是对象-关系映射，把关系数据库的一张表映射为一个类，一行映射为一个对象
   方便编写代码，不用直接操作SQL语句。
   Orm框架必须要动态定义，因为我们实际需要的类，都需要根据表结构进行定义；
   而python为我们提供了动态创建类的方法，即为 metaclass

   即，建立orm到使用metaclass的正确思考逻辑为（个人理解）：
   为了简化代码编写，需要将数据库映射为具体的对象；
   为了简化映射关系的建立过程，对映射过程进行了抽象，根据抽象的方法，定义orm框架
   （我们难道不可以不建Model，直接对每张表做一遍映射？但是无疑这么做复杂更多）
   ORM框架需要能够动态定义类，刚好python可以用metaclass动态定义类

   metaclass做了这些事：
   建立一个基类Model，任何继承自此类的具体子类，都将自动得到字段与属性的映射关系，
   并拥有增删改查等方法

   metaclass用于增强类的功能，通过自定义创建类的方法__new__，改变类的行为
   如此例中定义的ModelMetaclass，当基于Model生成子类时，子类将根据ModelMetaclass定
   义的__new__，创建__mapping__、__table__等属性，动态创建各种使用的Model
** {}用于匹配指定次数时，中间一定不能带上空格
   email的正则表达式：
   #+begin_src python
     email_regex = re.compile(r'''(
     ^
     ([a-zA-Z0-9._%+_]+) # username
     (@)                 # symbol
     ([a-zA-Z0-9-.]+)    # domain name
     (\.[a-zA-Z]{2,4})    # 不能带空格 切记
     $
     )
     ''', re.VERBOSE)
   #+end_src
** 数据库记陆的密码与登录
   首先，后端拿到的初始密码即已经通过前端进行摘要，数据在由客户端传递至服务端时，用户密码已经经过了sha1摘要

   服务端获取到用户注册时传递的passwd后，拼接用户 ~uid~ ~:~ ~passwd~ ，再次进行摘要，将摘要结果计入数据库中
   
   用户登陆时，服务端接收到用户传递的passwd，查找用户，取出uid，再次拼接为 ~uid~ ~:~ ~passwd~ ，进行摘要后与数据库密钥相比对，相同即登陆完成
